// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  clerkUserId String  @unique
  email       String  @unique
  name        String?
  imageUrl    String?
  industry    String?

  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  bio        String?
  experience Int?
  skills     String[]

  assesments  Assesments[]
  resume      Resume?
  coverLetter CoverLetter[]
}

model Assesments {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  quizScore    Float
  questions    Json[]
  catagory     String
  improvements String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  // atsScore   Float?
  // feedback   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String?
  compnayName    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id       String @id @default(uuid())
  industry String @unique

  users User[]

  salaryRange Json[]

  growthRate  Float
  demandLevel DemandLevel
  topSkills   String[]

  marketOutLook MarketOutlook
  keyTrends     String[]

  recomendedSkills String[]

  lastUpdated DateTime @default(now())
  nextUpdate  DateTime

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NETURAL
  NEGATIVE
}
